//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from IfStmt.g4 by ANTLR 4.5.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace OTBO_RuleEngine
{
using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;
using IToken = Antlr4.Runtime.IToken;


[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5.1")]
//[System.CLSCompliant(false)]
public partial class IfStmtParser : Parser {
	public const int
		OR=1, AND=2, EQ=3, NEQ=4, GT=5, LT=6, GTEQ=7, LTEQ=8, PLUS=9, MINUS=10, 
		MULT=11, DIV=12, MOD=13, POW=14, NOT=15, SCOL=16, ASSIGN=17, OPAR=18, 
		CPAR=19, OBRACE=20, CBRACE=21, TRUE=22, FALSE=23, NIL=24, IF=25, ELSE=26, 
		ID=27, INT=28, FLOAT=29, STRING=30, COMMENT=31, SPACE=32, OTHER=33;
	public const int
		RULE_parse = 0, RULE_block = 1, RULE_stat = 2, RULE_assignment = 3, RULE_if_stat = 4, 
		RULE_condition_block = 5, RULE_stat_block = 6, RULE_expr = 7, RULE_atom = 8;
	public static readonly string[] ruleNames = {
		"parse", "block", "stat", "assignment", "if_stat", "condition_block", 
		"stat_block", "expr", "atom"
	};

	private static readonly string[] _LiteralNames = {
		null, "'||'", "'&&'", "'=='", "'!='", "'>'", "'<'", "'>='", "'<='", "'+'", 
		"'-'", "'*'", "'/'", "'%'", "'^'", "'!'", "';'", "'='", "'('", "')'", 
		"'{'", "'}'", "'true'", "'false'", "'nil'", "'if'", "'else'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "OR", "AND", "EQ", "NEQ", "GT", "LT", "GTEQ", "LTEQ", "PLUS", "MINUS", 
		"MULT", "DIV", "MOD", "POW", "NOT", "SCOL", "ASSIGN", "OPAR", "CPAR", 
		"OBRACE", "CBRACE", "TRUE", "FALSE", "NIL", "IF", "ELSE", "ID", "INT", 
		"FLOAT", "STRING", "COMMENT", "SPACE", "OTHER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "IfStmt.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public IfStmtParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class ParseContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode Eof() { return GetToken(IfStmtParser.Eof, 0); }
		public ParseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parse; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.EnterParse(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.ExitParse(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIfStmtVisitor<TResult> typedVisitor = visitor as IIfStmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParse(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParseContext parse() {
		ParseContext _localctx = new ParseContext(Context, State);
		EnterRule(_localctx, 0, RULE_parse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 18; block();
			State = 19; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIfStmtVisitor<TResult> typedVisitor = visitor as IIfStmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 2, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << IF) | (1L << ID) | (1L << OTHER))) != 0)) {
				{
				{
				State = 21; stat();
				}
				}
				State = 26;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public IToken _OTHER;
		public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		public If_statContext if_stat() {
			return GetRuleContext<If_statContext>(0);
		}
		public ITerminalNode OTHER() { return GetToken(IfStmtParser.OTHER, 0); }
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIfStmtVisitor<TResult> typedVisitor = visitor as IIfStmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 4, RULE_stat);
		try {
			State = 31;
			switch (TokenStream.La(1)) {
			case ID:
				EnterOuterAlt(_localctx, 1);
				{
				State = 27; assignment();
				}
				break;
			case IF:
				EnterOuterAlt(_localctx, 2);
				{
				State = 28; if_stat();
				}
				break;
			case OTHER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 29; _localctx._OTHER = Match(OTHER);
				System.err.println("unknown char: " + (_localctx._OTHER!=null?_localctx._OTHER.Text:null));
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(IfStmtParser.ID, 0); }
		public ITerminalNode ASSIGN() { return GetToken(IfStmtParser.ASSIGN, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode SCOL() { return GetToken(IfStmtParser.SCOL, 0); }
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIfStmtVisitor<TResult> typedVisitor = visitor as IIfStmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 6, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33; Match(ID);
			State = 34; Match(ASSIGN);
			State = 35; expr(0);
			State = 36; Match(SCOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_statContext : ParserRuleContext {
		public ITerminalNode[] IF() { return GetTokens(IfStmtParser.IF); }
		public ITerminalNode IF(int i) {
			return GetToken(IfStmtParser.IF, i);
		}
		public Condition_blockContext[] condition_block() {
			return GetRuleContexts<Condition_blockContext>();
		}
		public Condition_blockContext condition_block(int i) {
			return GetRuleContext<Condition_blockContext>(i);
		}
		public ITerminalNode[] ELSE() { return GetTokens(IfStmtParser.ELSE); }
		public ITerminalNode ELSE(int i) {
			return GetToken(IfStmtParser.ELSE, i);
		}
		public Stat_blockContext stat_block() {
			return GetRuleContext<Stat_blockContext>(0);
		}
		public If_statContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.EnterIf_stat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.ExitIf_stat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIfStmtVisitor<TResult> typedVisitor = visitor as IIfStmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIf_stat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public If_statContext if_stat() {
		If_statContext _localctx = new If_statContext(Context, State);
		EnterRule(_localctx, 8, RULE_if_stat);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 38; Match(IF);
			State = 39; condition_block();
			State = 45;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 40; Match(ELSE);
					State = 41; Match(IF);
					State = 42; condition_block();
					}
					} 
				}
				State = 47;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			State = 50;
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 48; Match(ELSE);
				State = 49; stat_block();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Condition_blockContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Stat_blockContext stat_block() {
			return GetRuleContext<Stat_blockContext>(0);
		}
		public Condition_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.EnterCondition_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.ExitCondition_block(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIfStmtVisitor<TResult> typedVisitor = visitor as IIfStmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCondition_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Condition_blockContext condition_block() {
		Condition_blockContext _localctx = new Condition_blockContext(Context, State);
		EnterRule(_localctx, 10, RULE_condition_block);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52; expr(0);
			State = 53; stat_block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Stat_blockContext : ParserRuleContext {
		public ITerminalNode OBRACE() { return GetToken(IfStmtParser.OBRACE, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode CBRACE() { return GetToken(IfStmtParser.CBRACE, 0); }
		public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public Stat_blockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.EnterStat_block(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.ExitStat_block(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIfStmtVisitor<TResult> typedVisitor = visitor as IIfStmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat_block(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Stat_blockContext stat_block() {
		Stat_blockContext _localctx = new Stat_blockContext(Context, State);
		EnterRule(_localctx, 12, RULE_stat_block);
		try {
			State = 60;
			switch (TokenStream.La(1)) {
			case OBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 55; Match(OBRACE);
				State = 56; block();
				State = 57; Match(CBRACE);
				}
				break;
			case IF:
			case ID:
			case OTHER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 59; stat();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NotExprContext : ExprContext {
		public ITerminalNode NOT() { return GetToken(IfStmtParser.NOT, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.EnterNotExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.ExitNotExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIfStmtVisitor<TResult> typedVisitor = visitor as IIfStmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class UnaryMinusExprContext : ExprContext {
		public ITerminalNode MINUS() { return GetToken(IfStmtParser.MINUS, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UnaryMinusExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.EnterUnaryMinusExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.ExitUnaryMinusExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIfStmtVisitor<TResult> typedVisitor = visitor as IIfStmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnaryMinusExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MultiplicationExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode MULT() { return GetToken(IfStmtParser.MULT, 0); }
		public ITerminalNode DIV() { return GetToken(IfStmtParser.DIV, 0); }
		public ITerminalNode MOD() { return GetToken(IfStmtParser.MOD, 0); }
		public MultiplicationExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.EnterMultiplicationExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.ExitMultiplicationExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIfStmtVisitor<TResult> typedVisitor = visitor as IIfStmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMultiplicationExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomExprContext : ExprContext {
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public AtomExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.EnterAtomExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.ExitAtomExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIfStmtVisitor<TResult> typedVisitor = visitor as IIfStmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode OR() { return GetToken(IfStmtParser.OR, 0); }
		public OrExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.EnterOrExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.ExitOrExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIfStmtVisitor<TResult> typedVisitor = visitor as IIfStmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AdditiveExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode PLUS() { return GetToken(IfStmtParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(IfStmtParser.MINUS, 0); }
		public AdditiveExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.EnterAdditiveExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.ExitAdditiveExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIfStmtVisitor<TResult> typedVisitor = visitor as IIfStmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdditiveExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class RelationalExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode LTEQ() { return GetToken(IfStmtParser.LTEQ, 0); }
		public ITerminalNode GTEQ() { return GetToken(IfStmtParser.GTEQ, 0); }
		public ITerminalNode LT() { return GetToken(IfStmtParser.LT, 0); }
		public ITerminalNode GT() { return GetToken(IfStmtParser.GT, 0); }
		public RelationalExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.EnterRelationalExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.ExitRelationalExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIfStmtVisitor<TResult> typedVisitor = visitor as IIfStmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExprContext : ExprContext {
		public IToken op;
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode EQ() { return GetToken(IfStmtParser.EQ, 0); }
		public ITerminalNode NEQ() { return GetToken(IfStmtParser.NEQ, 0); }
		public EqualityExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.EnterEqualityExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.ExitEqualityExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIfStmtVisitor<TResult> typedVisitor = visitor as IIfStmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExprContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode AND() { return GetToken(IfStmtParser.AND, 0); }
		public AndExprContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.EnterAndExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.ExitAndExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIfStmtVisitor<TResult> typedVisitor = visitor as IIfStmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 68;
			switch (TokenStream.La(1)) {
			case MINUS:
				{
				_localctx = new UnaryMinusExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 63; Match(MINUS);
				State = 64; expr(9);
				}
				break;
			case NOT:
				{
				_localctx = new NotExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 65; Match(NOT);
				State = 66; expr(8);
				}
				break;
			case OPAR:
			case TRUE:
			case FALSE:
			case NIL:
			case ID:
			case INT:
			case FLOAT:
			case STRING:
				{
				_localctx = new AtomExprContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 67; atom();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 90;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 88;
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new MultiplicationExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 70;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 71;
						((MultiplicationExprContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MULT) | (1L << DIV) | (1L << MOD))) != 0)) ) {
							((MultiplicationExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 72; expr(8);
						}
						break;
					case 2:
						{
						_localctx = new AdditiveExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 73;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 74;
						((AdditiveExprContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((AdditiveExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 75; expr(7);
						}
						break;
					case 3:
						{
						_localctx = new RelationalExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 76;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 77;
						((RelationalExprContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << LT) | (1L << GTEQ) | (1L << LTEQ))) != 0)) ) {
							((RelationalExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 78; expr(6);
						}
						break;
					case 4:
						{
						_localctx = new EqualityExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 79;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 80;
						((EqualityExprContext)_localctx).op = TokenStream.Lt(1);
						_la = TokenStream.La(1);
						if ( !(_la==EQ || _la==NEQ) ) {
							((EqualityExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 81; expr(5);
						}
						break;
					case 5:
						{
						_localctx = new AndExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 82;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 83; Match(AND);
						State = 84; expr(4);
						}
						break;
					case 6:
						{
						_localctx = new OrExprContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 85;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 86; Match(OR);
						State = 87; expr(3);
						}
						break;
					}
					} 
				}
				State = 92;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	 
		public AtomContext() { }
		public virtual void CopyFrom(AtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParExprContext : AtomContext {
		public ITerminalNode OPAR() { return GetToken(IfStmtParser.OPAR, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode CPAR() { return GetToken(IfStmtParser.CPAR, 0); }
		public ParExprContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.EnterParExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.ExitParExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIfStmtVisitor<TResult> typedVisitor = visitor as IIfStmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanAtomContext : AtomContext {
		public ITerminalNode TRUE() { return GetToken(IfStmtParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(IfStmtParser.FALSE, 0); }
		public BooleanAtomContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.EnterBooleanAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.ExitBooleanAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIfStmtVisitor<TResult> typedVisitor = visitor as IIfStmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdAtomContext : AtomContext {
		public ITerminalNode ID() { return GetToken(IfStmtParser.ID, 0); }
		public IdAtomContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.EnterIdAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.ExitIdAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIfStmtVisitor<TResult> typedVisitor = visitor as IIfStmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringAtomContext : AtomContext {
		public ITerminalNode STRING() { return GetToken(IfStmtParser.STRING, 0); }
		public StringAtomContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.EnterStringAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.ExitStringAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIfStmtVisitor<TResult> typedVisitor = visitor as IIfStmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NilAtomContext : AtomContext {
		public ITerminalNode NIL() { return GetToken(IfStmtParser.NIL, 0); }
		public NilAtomContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.EnterNilAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.ExitNilAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIfStmtVisitor<TResult> typedVisitor = visitor as IIfStmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNilAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberAtomContext : AtomContext {
		public ITerminalNode INT() { return GetToken(IfStmtParser.INT, 0); }
		public ITerminalNode FLOAT() { return GetToken(IfStmtParser.FLOAT, 0); }
		public NumberAtomContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.EnterNumberAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IIfStmtListener typedListener = listener as IIfStmtListener;
			if (typedListener != null) typedListener.ExitNumberAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IIfStmtVisitor<TResult> typedVisitor = visitor as IIfStmtVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 16, RULE_atom);
		int _la;
		try {
			State = 102;
			switch (TokenStream.La(1)) {
			case OPAR:
				_localctx = new ParExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 93; Match(OPAR);
				State = 94; expr(0);
				State = 95; Match(CPAR);
				}
				break;
			case INT:
			case FLOAT:
				_localctx = new NumberAtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 97;
				_la = TokenStream.La(1);
				if ( !(_la==INT || _la==FLOAT) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				break;
			case TRUE:
			case FALSE:
				_localctx = new BooleanAtomContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 98;
				_la = TokenStream.La(1);
				if ( !(_la==TRUE || _la==FALSE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				}
				break;
			case ID:
				_localctx = new IdAtomContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 99; Match(ID);
				}
				break;
			case STRING:
				_localctx = new StringAtomContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 100; Match(STRING);
				}
				break;
			case NIL:
				_localctx = new NilAtomContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 101; Match(NIL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 7: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		case 5: return Precpred(Context, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3#k\x4\x2\t\x2\x4"+
		"\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t\t\x4"+
		"\n\t\n\x3\x2\x3\x2\x3\x2\x3\x3\a\x3\x19\n\x3\f\x3\xE\x3\x1C\v\x3\x3\x4"+
		"\x3\x4\x3\x4\x3\x4\x5\x4\"\n\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\a\x6.\n\x6\f\x6\xE\x6\x31\v\x6\x3\x6\x3\x6\x5\x6"+
		"\x35\n\x6\x3\a\x3\a\x3\a\x3\b\x3\b\x3\b\x3\b\x3\b\x5\b?\n\b\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x5\tG\n\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\a\t[\n\t\f\t\xE\t^"+
		"\v\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\ni\n\n\x3\n\x2\x3"+
		"\x10\v\x2\x4\x6\b\n\f\xE\x10\x12\x2\b\x3\x2\r\xF\x3\x2\v\f\x3\x2\a\n\x3"+
		"\x2\x5\x6\x3\x2\x1E\x1F\x3\x2\x18\x19t\x2\x14\x3\x2\x2\x2\x4\x1A\x3\x2"+
		"\x2\x2\x6!\x3\x2\x2\x2\b#\x3\x2\x2\x2\n(\x3\x2\x2\x2\f\x36\x3\x2\x2\x2"+
		"\xE>\x3\x2\x2\x2\x10\x46\x3\x2\x2\x2\x12h\x3\x2\x2\x2\x14\x15\x5\x4\x3"+
		"\x2\x15\x16\a\x2\x2\x3\x16\x3\x3\x2\x2\x2\x17\x19\x5\x6\x4\x2\x18\x17"+
		"\x3\x2\x2\x2\x19\x1C\x3\x2\x2\x2\x1A\x18\x3\x2\x2\x2\x1A\x1B\x3\x2\x2"+
		"\x2\x1B\x5\x3\x2\x2\x2\x1C\x1A\x3\x2\x2\x2\x1D\"\x5\b\x5\x2\x1E\"\x5\n"+
		"\x6\x2\x1F \a#\x2\x2 \"\b\x4\x1\x2!\x1D\x3\x2\x2\x2!\x1E\x3\x2\x2\x2!"+
		"\x1F\x3\x2\x2\x2\"\a\x3\x2\x2\x2#$\a\x1D\x2\x2$%\a\x13\x2\x2%&\x5\x10"+
		"\t\x2&\'\a\x12\x2\x2\'\t\x3\x2\x2\x2()\a\x1B\x2\x2)/\x5\f\a\x2*+\a\x1C"+
		"\x2\x2+,\a\x1B\x2\x2,.\x5\f\a\x2-*\x3\x2\x2\x2.\x31\x3\x2\x2\x2/-\x3\x2"+
		"\x2\x2/\x30\x3\x2\x2\x2\x30\x34\x3\x2\x2\x2\x31/\x3\x2\x2\x2\x32\x33\a"+
		"\x1C\x2\x2\x33\x35\x5\xE\b\x2\x34\x32\x3\x2\x2\x2\x34\x35\x3\x2\x2\x2"+
		"\x35\v\x3\x2\x2\x2\x36\x37\x5\x10\t\x2\x37\x38\x5\xE\b\x2\x38\r\x3\x2"+
		"\x2\x2\x39:\a\x16\x2\x2:;\x5\x4\x3\x2;<\a\x17\x2\x2<?\x3\x2\x2\x2=?\x5"+
		"\x6\x4\x2>\x39\x3\x2\x2\x2>=\x3\x2\x2\x2?\xF\x3\x2\x2\x2@\x41\b\t\x1\x2"+
		"\x41\x42\a\f\x2\x2\x42G\x5\x10\t\v\x43\x44\a\x11\x2\x2\x44G\x5\x10\t\n"+
		"\x45G\x5\x12\n\x2\x46@\x3\x2\x2\x2\x46\x43\x3\x2\x2\x2\x46\x45\x3\x2\x2"+
		"\x2G\\\x3\x2\x2\x2HI\f\t\x2\x2IJ\t\x2\x2\x2J[\x5\x10\t\nKL\f\b\x2\x2L"+
		"M\t\x3\x2\x2M[\x5\x10\t\tNO\f\a\x2\x2OP\t\x4\x2\x2P[\x5\x10\t\bQR\f\x6"+
		"\x2\x2RS\t\x5\x2\x2S[\x5\x10\t\aTU\f\x5\x2\x2UV\a\x4\x2\x2V[\x5\x10\t"+
		"\x6WX\f\x4\x2\x2XY\a\x3\x2\x2Y[\x5\x10\t\x5ZH\x3\x2\x2\x2ZK\x3\x2\x2\x2"+
		"ZN\x3\x2\x2\x2ZQ\x3\x2\x2\x2ZT\x3\x2\x2\x2ZW\x3\x2\x2\x2[^\x3\x2\x2\x2"+
		"\\Z\x3\x2\x2\x2\\]\x3\x2\x2\x2]\x11\x3\x2\x2\x2^\\\x3\x2\x2\x2_`\a\x14"+
		"\x2\x2`\x61\x5\x10\t\x2\x61\x62\a\x15\x2\x2\x62i\x3\x2\x2\x2\x63i\t\x6"+
		"\x2\x2\x64i\t\a\x2\x2\x65i\a\x1D\x2\x2\x66i\a \x2\x2gi\a\x1A\x2\x2h_\x3"+
		"\x2\x2\x2h\x63\x3\x2\x2\x2h\x64\x3\x2\x2\x2h\x65\x3\x2\x2\x2h\x66\x3\x2"+
		"\x2\x2hg\x3\x2\x2\x2i\x13\x3\x2\x2\x2\v\x1A!/\x34>\x46Z\\h";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace AntlrApp
